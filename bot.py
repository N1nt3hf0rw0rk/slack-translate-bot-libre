import os
import threading
import http.server
import socketserver
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from googletrans import Translator
import logging

# üîß Fake HTTP server –¥–ª—è Render
def run_fake_server():
    PORT = 8080
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving fake HTTP server on port {PORT}")
        httpd.serve_forever()

threading.Thread(target=run_fake_server, daemon=True).start()

# üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Slack —Ç–∞ Google Translate
app = App(token=os.environ["SLACK_BOT_TOKEN"])
translator = Translator()
client = WebClient(token=os.environ["SLACK_BOT_TOKEN"])

# ‚úÖ –ú–∞–ø–∞ –µ–º–æ–¥–∑—ñ –¥–æ ISO-–∫–æ–¥—ñ–≤ –º–æ–≤ (–∞ –Ω–µ –Ω–∞–∑–≤)
emoji_to_lang = {
    "uk": "uk",  # —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    "gb": "en",  # –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞
    "ru": "ru",  # —Ä–æ—Å—ñ–π—Å—å–∫–∞
}

# üìù –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.event("reaction_added")
def handle_reaction(event, say):
    reaction = event["reaction"].strip(":")
    item = event["item"]
    user_id = event["user"]

    logger.info(f"handle_reaction_added:–û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∞–∫—Ü—ñ—é: {reaction}")

    # üéØ –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—É –º–æ–≤—É
    target_lang_code = emoji_to_lang.get(reaction)
    if not target_lang_code:
        logger.info(f"–Ü–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ —Ä–µ–∞–∫—Ü—ñ—é: {reaction}")
        return

    try:
        channel_id = item["channel"]
        message_ts = item["ts"]

        # üì© –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        result = client.conversations_history(
            channel=channel_id, latest=message_ts, limit=1, inclusive=True
        )
        messages = result["messages"]
        if not messages:
            logger.error("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        original_text = messages[0].get("text", "")
        if not original_text:
            logger.info("–ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç.")
            return

        # üåê –ü–µ—Ä–µ–∫–ª–∞–¥
        translated = translator.translate(original_text, dest=target_lang_code).text

        # üì® –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        im = client.conversations_open(users=user_id)
        dm_channel = im["channel"]["id"]

        client.chat_postMessage(
            channel=dm_channel,
            text=f":repeat: –ü–µ—Ä–µ–∫–ª–∞–¥ ({target_lang_code}):\n{translated}"
        )

    except SlackApiError as e:
        logger.error(f"Slack API error: {e.response['error']}")
    except Exception as ex:
        logger.exception(f"Unexpected error: {ex}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    SocketModeHandler(app, os.environ["SLACK_APP_TOKEN"]).start()
